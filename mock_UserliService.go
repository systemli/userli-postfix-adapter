// Code generated by mockery v2.46.1. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockUserliService is an autogenerated mock type for the UserliService type
type MockUserliService struct {
	mock.Mock
}

// GetAliases provides a mock function with given fields: email
func (_m *MockUserliService) GetAliases(email string) ([]string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetAliases")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomain provides a mock function with given fields: domain
func (_m *MockUserliService) GetDomain(domain string) (bool, error) {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for GetDomain")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUserliService creates a new instance of MockUserliService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserliService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserliService {
	mock := &MockUserliService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
