// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserliService creates a new instance of MockUserliService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserliService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserliService {
	mock := &MockUserliService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserliService is an autogenerated mock type for the UserliService type
type MockUserliService struct {
	mock.Mock
}

type MockUserliService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserliService) EXPECT() *MockUserliService_Expecter {
	return &MockUserliService_Expecter{mock: &_m.Mock}
}

// GetAliases provides a mock function for the type MockUserliService
func (_mock *MockUserliService) GetAliases(ctx context.Context, email string) ([]string, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetAliases")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserliService_GetAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAliases'
type MockUserliService_GetAliases_Call struct {
	*mock.Call
}

// GetAliases is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserliService_Expecter) GetAliases(ctx interface{}, email interface{}) *MockUserliService_GetAliases_Call {
	return &MockUserliService_GetAliases_Call{Call: _e.mock.On("GetAliases", ctx, email)}
}

func (_c *MockUserliService_GetAliases_Call) Run(run func(ctx context.Context, email string)) *MockUserliService_GetAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserliService_GetAliases_Call) Return(strings []string, err error) *MockUserliService_GetAliases_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockUserliService_GetAliases_Call) RunAndReturn(run func(ctx context.Context, email string) ([]string, error)) *MockUserliService_GetAliases_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomain provides a mock function for the type MockUserliService
func (_mock *MockUserliService) GetDomain(ctx context.Context, domain string) (bool, error) {
	ret := _mock.Called(ctx, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetDomain")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, domain)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, domain)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserliService_GetDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomain'
type MockUserliService_GetDomain_Call struct {
	*mock.Call
}

// GetDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockUserliService_Expecter) GetDomain(ctx interface{}, domain interface{}) *MockUserliService_GetDomain_Call {
	return &MockUserliService_GetDomain_Call{Call: _e.mock.On("GetDomain", ctx, domain)}
}

func (_c *MockUserliService_GetDomain_Call) Run(run func(ctx context.Context, domain string)) *MockUserliService_GetDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserliService_GetDomain_Call) Return(b bool, err error) *MockUserliService_GetDomain_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserliService_GetDomain_Call) RunAndReturn(run func(ctx context.Context, domain string) (bool, error)) *MockUserliService_GetDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailbox provides a mock function for the type MockUserliService
func (_mock *MockUserliService) GetMailbox(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetMailbox")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserliService_GetMailbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailbox'
type MockUserliService_GetMailbox_Call struct {
	*mock.Call
}

// GetMailbox is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserliService_Expecter) GetMailbox(ctx interface{}, email interface{}) *MockUserliService_GetMailbox_Call {
	return &MockUserliService_GetMailbox_Call{Call: _e.mock.On("GetMailbox", ctx, email)}
}

func (_c *MockUserliService_GetMailbox_Call) Run(run func(ctx context.Context, email string)) *MockUserliService_GetMailbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserliService_GetMailbox_Call) Return(b bool, err error) *MockUserliService_GetMailbox_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserliService_GetMailbox_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *MockUserliService_GetMailbox_Call {
	_c.Call.Return(run)
	return _c
}

// GetSenders provides a mock function for the type MockUserliService
func (_mock *MockUserliService) GetSenders(ctx context.Context, email string) ([]string, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetSenders")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserliService_GetSenders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSenders'
type MockUserliService_GetSenders_Call struct {
	*mock.Call
}

// GetSenders is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserliService_Expecter) GetSenders(ctx interface{}, email interface{}) *MockUserliService_GetSenders_Call {
	return &MockUserliService_GetSenders_Call{Call: _e.mock.On("GetSenders", ctx, email)}
}

func (_c *MockUserliService_GetSenders_Call) Run(run func(ctx context.Context, email string)) *MockUserliService_GetSenders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserliService_GetSenders_Call) Return(strings []string, err error) *MockUserliService_GetSenders_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockUserliService_GetSenders_Call) RunAndReturn(run func(ctx context.Context, email string) ([]string, error)) *MockUserliService_GetSenders_Call {
	_c.Call.Return(run)
	return _c
}
